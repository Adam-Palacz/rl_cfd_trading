name: ML Workspace Infrastructure - $(date:yyyyMMdd)

trigger:
  - main

parameters:
  - name: buildMLWorkspace
    type: boolean
    default: false

  - name: destroyMLWorkspace
    type: boolean
    default: false

variables:
  - group: terraform-backend-config

stages:
- stage: BuildInfra
  condition: ${{ parameters.buildMLWorkspace }}
  jobs:
  - job: BuildInfrastructure
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: 'latest'

    - task: TerraformTaskV4@4
      displayName: "Terraform Init"
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'ado_ml'
        backendAzureRmResourceGroupName: '$(backend_resource_group_name)'
        backendAzureRmStorageAccountName: '$(backend_storage_account_name)'
        backendAzureRmContainerName: '$(backend_container_name)'
        backendAzureRmKey: 'terraform.tfstate'
        workingDirectory: 'IaC'

    - task: AzureCLI@2
      inputs:
        azureSubscription: 'ado_ml'
        scriptType: 'bash'
        workingDirectory: 'IaC'
        scriptLocation: 'inlineScript'
        inlineScript: |
          export ARM_CLIENT_ID='$(ARM_CLIENT_ID)'
          export ARM_CLIENT_SECRET='$(ARM_CLIENT_SECRET)'
          export ARM_TENANT_ID='$(ARM_TENANT_ID)'
          export ARM_SUBSCRIPTION_ID='$(ARM_SUBSCRIPTION_ID)' 
          
          terraform plan

  - job: CheckovAndTerrascan
    displayName: 'Terraform code analysis'
    pool:
      vmImage: 'ubuntu-latest'
    dependsOn: 
      - BuildInfrastructure
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.12'
        addToPath: true
        
    # - script: |
    #   curl -L "$(curl -s https://api.github.com/repos/accurics/terrascan/releases/latest | grep -o -E "https://.+?_Linux_x86_64.tar.gz")" > terrascan.tar.gz
    #   tar -xf terrascan.tar.gz terrascan && rm terrascan.tar.gz
    #   sudo mv terrascan /usr/local/bin/terrascan
    #   terrascan scan -d $(System.DefaultWorkingDirectory)/IaC
    # displayName: 'Run Terrascan'

    - script: |
      pip install checkov terrascan
      checkov -d $(System.DefaultWorkingDirectory)/IaC -o cli
    # displayName: 'Run Checkov'


  - job: WaitForValidation
    displayName: 'Wait for validation'
    pool: server
    dependsOn: 
      - BuildInfrastructure
      - Checkov/Terrascan
    timeoutInMinutes: 1440

    steps:
    - task: ManualValidation@0
      timeoutInMinutes: 1440
      inputs:
        instructions: 'Verify TF plan'
        onTimeout: 'reject'

  - job: ApplyTerraform
    displayName: 'Apply terraform code'
    pool:
      vmImage: 'ubuntu-latest'
    dependsOn: 
      - BuildInfrastructure
      - Checkov/Terrascan
      - WaitForValidation
    condition: and(succeeded('BuildInfrastructure'), succeeded('WaitForValidation'))
    steps:
    - task: TerraformTaskV4@4
      displayName: "Terraform Init"
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'ado_ml'
        backendAzureRmResourceGroupName: '$(backend_resource_group_name)'
        backendAzureRmStorageAccountName: '$(backend_storage_account_name)'
        backendAzureRmContainerName: '$(backend_container_name)'
        backendAzureRmKey: 'terraform.tfstate'
        workingDirectory: 'IaC'


    - task: AzureCLI@2
      inputs:
        azureSubscription: 'ado_ml'
        scriptType: 'bash'
        workingDirectory: 'IaC'
        scriptLocation: 'inlineScript'
        inlineScript: |
          export ARM_CLIENT_ID='$(ARM_CLIENT_ID)'
          export ARM_CLIENT_SECRET='$(ARM_CLIENT_SECRET)'
          export ARM_TENANT_ID='$(ARM_TENANT_ID)'
          export ARM_SUBSCRIPTION_ID='$(ARM_SUBSCRIPTION_ID)' 
              
          terraform apply --auto-approve

- stage: DestroyInfra
  condition: ${{ parameters.destroyMLWorkspace }}
  jobs:
  - job: DestroyIfrastructure
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: 'latest'
    
    - task: TerraformTaskV4@4
      displayName: "Terraform Init"
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'ado_ml'
        backendAzureRmResourceGroupName: '$(backend_resource_group_name)'
        backendAzureRmStorageAccountName: '$(backend_storage_account_name)'
        backendAzureRmContainerName: '$(backend_container_name)'
        backendAzureRmKey: 'terraform.tfstate'
        workingDirectory: 'IaC'

    - task: AzureCLI@2
      inputs:
        azureSubscription: 'ado_ml'
        scriptType: 'bash'
        workingDirectory: 'IaC'
        scriptLocation: 'inlineScript'
        inlineScript: |
          export ARM_CLIENT_ID='$(ARM_CLIENT_ID)'
          export ARM_CLIENT_SECRET='$(ARM_CLIENT_SECRET)'
          export ARM_TENANT_ID='$(ARM_TENANT_ID)'
          export ARM_SUBSCRIPTION_ID='$(ARM_SUBSCRIPTION_ID)' 
              
          terraform plan 

  - job: WaitForValidation
    displayName: 'Wait for validation'
    pool: server
    dependsOn: 
      - DestroyInfrastructure
    timeoutInMinutes: 1440

    steps:
    - task: ManualValidation@0
      timeoutInMinutes: 1440
      inputs:
        instructions: 'Verify TF plan'
        onTimeout: 'reject'

  - job: DestroyTerraform
    displayName: 'Destroy terraform code'
    pool:
      vmImage: 'ubuntu-latest'
    dependsOn: 
      - DestroyInfrastructure
      - WaitForValidation
    condition: and(succeeded('DestroyInfrastructure'), succeeded('WaitForValidation'))
    steps:
    - task: AzureCLI@2
      displayName: 'Terraform Destroy'
      inputs:
        azureSubscription: 'ado_ml'
        scriptType: 'bash'
        workingDirectory: 'IaC'
        scriptLocation: 'inlineScript'
        inlineScript: |
          export ARM_CLIENT_ID='$(ARM_CLIENT_ID)'
          export ARM_CLIENT_SECRET='$(ARM_CLIENT_SECRET)'
          export ARM_TENANT_ID='$(ARM_TENANT_ID)'
          export ARM_SUBSCRIPTION_ID='$(ARM_SUBSCRIPTION_ID)' 
              
          terraform destroy --auto-approve