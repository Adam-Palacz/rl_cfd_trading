name: ML Workspace Infrastructure - $(date:yyyyMMdd)

trigger:
  - main

parameters:
  - name: buildMLWorkspace
    type: boolean
    default: false

  - name: destroyMLWorkspace
    type: boolean
    default: false

variables:
  - group: terraform-backend-config

stages:
- stage: BuildInfra
  condition: ${{ parameters.buildMLWorkspace }}
  jobs:
  - job: BuildInfrastructure
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: 'latest'

    - task: TerraformTaskV4@4
      displayName: "Terraform Init"
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'ado_ml'
        backendAzureRmResourceGroupName: '$(backend_resource_group_name)'
        backendAzureRmStorageAccountName: '$(backend_storage_account_name)'
        backendAzureRmContainerName: '$(backend_container_name)'
        backendAzureRmKey: 'terraform.tfstate'
        workingDirectory: 'IaC'


    - task: AzureCLI@2
      inputs:
        azureSubscription: 'ado_ml'
        scriptType: 'bash'
        workingDirectory: 'IaC'
        scriptLocation: 'inlineScript'
        inlineScript: |
          export ARM_CLIENT_ID='$(ARM_CLIENT_ID)'
          export ARM_CLIENT_SECRET='$(ARM_CLIENT_SECRET)'
          export ARM_TENANT_ID='$(ARM_TENANT_ID)'
          export ARM_SUBSCRIPTION_ID='$(ARM_SUBSCRIPTION_ID)' 
              
          # Run Terraform plan
          terraform plan

  - job: WaitForValidation
    displayName: 'Wait for validation'
    pool: server
    dependsOn: 
      - BuildInfrastructure
    timeoutInMinutes: 1440

    steps:
    - task: ManualValidation@0
      timeoutInMinutes: 1440
      inputs:
        instructions: 'Verify TF plan'
        onTimeout: 'reject'

  - job: ApplyTerraform
    displayName: 'Apply terraform code'
    pool:
      vmImage: 'ubuntu-latest'
    dependsOn: 
      - BuildInfrastructure
      - WaitForValidation
    condition: and(succeeded('BuildInfrastructure'), succeeded('WaitForValidation'))
    steps:
    - task: TerraformTaskV4@4
      displayName: "Terraform Init"
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'ado_ml'
        backendAzureRmResourceGroupName: '$(backend_resource_group_name)'
        backendAzureRmStorageAccountName: '$(backend_storage_account_name)'
        backendAzureRmContainerName: '$(backend_container_name)'
        backendAzureRmKey: 'terraform.tfstate'
        workingDirectory: 'IaC'


    - task: AzureCLI@2
      inputs:
        azureSubscription: 'ado_ml'
        scriptType: 'bash'
        workingDirectory: 'IaC'
        scriptLocation: 'inlineScript'
        inlineScript: |
          export ARM_CLIENT_ID='$(ARM_CLIENT_ID)'
          export ARM_CLIENT_SECRET='$(ARM_CLIENT_SECRET)'
          export ARM_TENANT_ID='$(ARM_TENANT_ID)'
          export ARM_SUBSCRIPTION_ID='$(ARM_SUBSCRIPTION_ID)' 
              
          # Run Terraform plan
          terraform apply --auto-approve
# - stage: DestroyInfra
#   condition: ${{ parameters.destroyMLWorkspace }}
#   jobs:
#   - job: DestroyIfrastructure
#     pool:
#       vmImage: 'ubuntu-latest'
#     steps:
#     - task: TerraformInstaller@0
#       inputs:
#         terraformVersion: 'latest'
    
#     - task: TerraformTaskV4@4
#       displayName: "Terraform Init"
#       inputs:
#         provider: 'azurerm'
#         command: 'init'
#         backendServiceArm: 'ado_ml'
#         backendAzureRmResourceGroupName: '$(backend_resource_group_name)'
#         backendAzureRmStorageAccountName: '$(backend_storage_account_name)'
#         backendAzureRmContainerName: '$(backend_container_name)'
#         backendAzureRmKey: 'terraform.tfstate'
#         workingDirectory: 'IaC'

#     - task: AzureCLI@2
#       inputs:
#         azureSubscription: 'ado_ml'
#         scriptType: 'bash'
#         workingDirectory: 'IaC'
#         scriptLocation: 'inlineScript'
#         inlineScript: |
#           export ARM_CLIENT_ID='$(ARM_CLIENT_ID)'
#           export ARM_CLIENT_SECRET='$(ARM_CLIENT_SECRET)'
#           export ARM_TENANT_ID='$(ARM_TENANT_ID)'
#           export ARM_SUBSCRIPTION_ID='$(ARM_SUBSCRIPTION_ID)' 
              
#           # Run Terraform plan
#           terraform plan 

#   - job: WaitForValidation
#     displayName: 'Wait for validation'
#     pool: server
#     dependsOn: 
#       - BuildInfrastructure
#     timeoutInMinutes: 1440

#     steps:
#     - task: ManualValidation@0
#       timeoutInMinutes: 1440
#       inputs:
#         instructions: 'Verify TF plan'
#         onTimeout: 'reject'

#   - job: ApplyTerraform
#     displayName: 'Apply terraform code'
#     pool:
#       vmImage: 'ubuntu-latest'
#     dependsOn: 
#       - DestroyInfrastructure
#       - WaitForValidation
#     condition: and(succeeded('DestroyInfrastructure'), succeeded('WaitForValidation'))
#     steps:
#     - task: TerraformTaskV4@4
#       inputs:
#         provider: 'azurerm'
#         command: 'destroy'
#         workingDirectory: 'IaC'
#         environmentServiceNameAzureRM: 'ado_ml'
#         commandOptions: >-
#           -var="ARM_CLIENT_ID=$(ARM_CLIENT_ID)"
#           -var="ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)"
#           -var="ARM_TENANT_ID=$(ARM_TENANT_ID)"
#           -var="ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)"